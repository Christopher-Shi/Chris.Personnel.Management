@page "/user"

    <Table TItem="UserFormViewModel"
       IsPagination="true" PageItemsSource="@PageItemsSource"
       IsStriped="true" IsBordered="true" SearchModel="@SearchModel" ShowSearch="true"
       ShowToolbar="true" IsMultipleSelect="true" ShowExtendButtons="false"
       ShowDefaultButtons="false"
       OnQueryAsync="@OnQueryAsync">
    <TableToolbarTemplate>
        <Button Color="Color.Primary" Icon="fa fa-fw fa-plus" @onclick="e => AddModal.Toggle()">新增</Button>
        <Button Color="Color.Warning" Icon="fa fa-fw fa-edit" @onclick="e => EditModal.Toggle()">编辑</Button>
        <Button Color="Color.Danger" Icon="fa fa-fw fa-trash" @onclick="e => AddModal.Toggle()">删除</Button>
    </TableToolbarTemplate>
    <TableColumns>
        <TableColumn @bind-Field="@context.Name" Filterable="true" Sortable="true" Searchable="true" />
        <TableColumn @bind-Field="@context.TrueName" Filterable="true" Sortable="true" />
        <TableColumn @bind-Field="@context.Gender" Filterable="true" Sortable="true" />
        <TableColumn @bind-Field="@context.CardId" Filterable="true" Sortable="true" />
        <TableColumn @bind-Field="@context.Phone" Filterable="true" Sortable="true" />
    </TableColumns>
</Table>

@*新增模态框*@
<Modal @ref="AddModal">
    <ModalDialog IsScrolling="true" Title="新增用户">
        <BodyTemplate>
            <div class="form-inline">
                <div class="row">
                    <div class="form-group col-6">
                        <label class="control-label">用户名</label>
                    </div>
                    <div class="form-group col-6">
                        <BootstrapInput type="text" DisplayText="chris" maxlength="5" placeholder="请输入用户名" Value="@UserAdd.User.UserName">
                            <RequiredValidator />
                            <StringLengthValidator Length="5" />
                        </BootstrapInput>
                    </div>
                </div>
            </div>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="Color.Success" Icon="fa fa-fw fa-save">保存</Button>
        </FooterTemplate>
    </ModalDialog>
</Modal>

@*编辑模态框*@
<Modal @ref="EditModal">
    <ModalDialog IsScrolling="true" Title="编辑用户">
        <BodyTemplate>
            <div class="form-inline">
                <div class="row">
                    <div class="form-group col-6">
                        <label class="control-label">用户名</label>
                    </div>
                    <div class="form-group col-6">
                        <BootstrapInput type="text" DisplayText="chris" maxlength="5" placeholder="请输入用户名" Value="@UserAdd.User.UserName">
                            <RequiredValidator />
                            <StringLengthValidator Length="5" />
                        </BootstrapInput>
                    </div>
                </div>
            </div>
        </BodyTemplate>
        <FooterTemplate>
            <Button Color="Color.Success" Icon="fa fa-fw fa-save">保存</Button>
        </FooterTemplate>
    </ModalDialog>
</Modal>

@code {
    protected IEnumerable<int> PageItemsSource => new int[] { 2, 4, 10, 20 };

    protected Task<QueryData<UserFormViewModel>> OnQueryAsync(QueryPageOptions options) => BindItemQueryAsync(Users, options);

    protected Task<QueryData<UserFormViewModel>> BindItemQueryAsync(IEnumerable<UserFormViewModel> items, QueryPageOptions options)
    {
        if (!string.IsNullOrEmpty(SearchModel.Name)) items = items.Where(item => item.Name?.Contains(SearchModel.Name, StringComparison.OrdinalIgnoreCase) ?? false);
        if (!string.IsNullOrEmpty(options.SearchText)) items = items.Where(item => (item.Name?.Contains(options.SearchText) ?? false)
                                                                                   || (item.TrueName?.Contains(options.SearchText) ?? false));

        // 过滤
        var isFiltered = false;
        if (options.Filters.Any())
        {
            items = items.Where(options.Filters.GetFilterFunc<UserFormViewModel>());

            // 通知内部已经过滤数据了
            isFiltered = true;
        }

        // 排序
        //var isSorted = false;
        //if (!string.IsNullOrEmpty(options.SortName))
        //{
        //    // 外部未进行排序，内部自动进行排序处理
        //    var invoker = SortLambdaCache.GetOrAdd(typeof(UserFormViewModel), key => items.GetSortLambda().Compile());
        //    items = invoker(items, options.SortName, options.SortOrder);

        //    // 通知内部已经过滤数据了
        //    isSorted = true;
        //}

        // 设置记录总数
        var total = items.Count();

        // 内存分页
        items = items.Skip((options.PageIndex - 1) * options.PageItems).Take(options.PageItems).ToList();

        return Task.FromResult(new QueryData<UserFormViewModel>()
        {
            Items = items,
            TotalCount = total,
            IsSorted = true,
            IsFiltered = isFiltered,
            IsSearch = !string.IsNullOrEmpty(SearchModel.Name) || !string.IsNullOrEmpty(SearchModel.TrueName)
        });
    }

    protected Task<UserFormViewModel> OnAddAsync()
    {
        return Task.FromResult(new UserFormViewModel() { });
    }

    protected Task<bool> OnSaveAsync(UserFormViewModel item)
    {
        //// 增加数据演示代码
        //if (item.Id == 0)
        //{
        //    lock (_objectLock)
        //    {
        //        item.Id = UserFormViewModel.Max(i => i.Id) + 1;
        //        UserFormViewModel.Add(item);
        //    }
        //}
        //else
        //{
        //    var oldItem = EditItems.FirstOrDefault(i => i.Id == item.Id);
        //    oldItem.Name = item.Name;
        //    oldItem.Address = item.Address;
        //    oldItem.DateTime = item.DateTime;
        //    oldItem.Count = item.Count;
        //}
        return Task.FromResult(true);
    }

    protected Task<bool> OnDeleteAsync(IEnumerable<UserFormViewModel> items)
    {
        //items.ToList().ForEach(i => UserFormViewModel.Remove(i));
        return Task.FromResult(true);
    }

    private Task AddClickAsync()
    {
        return Task.CompletedTask;
    }
}
